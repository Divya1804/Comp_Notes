Today's working

1. Git basic commnads. (With full description)
2. ps command
3. find command



PS (Process Status) Command--------->
--> This command is used to check status of the active processes on a system. 
--> This command enables you to check status of the active processes on system, and also display technical information about the processes.


FIND Command ---------->
--> Find command in linux is used to search for files in a directory.
Find command is a powerful utility in linux systems used to search for files and direcotories within a directory hierarchy based on various criteria...

	Using find command we can perform various operations likle finding files and directories from the directory structure. This command will help us in various ways like if want to find files that contains the given content, finding content that matches the pattern, finding files that were modified in last few days or weeks or months or even years., We can also combine the grep command with the given find command to perform operations like finding files that containing the pattern etc...
	we can also search by the type of file, like what we want, file or directory. we can also find files by their name, by their permissions (-perm) , we can also find the empty files or directories. 
	If there is a match, then it will return the file or direcotry name but if they don't match with anyone, then it wont return anything. 
	
	
	
Why linux ?
--> It provides a text-based interface to directly interact with the OS, allowing users to perform various tasks like file management, software installation, system configuration, and automation with powerful commands. It is much faster and more efficient than using a GUI, especially for advance users and system administrators.

Reasons to use Linux:-
1. Advance functionality.
2. Speed and efficiency.
3. System administration
4. Scripting and automation
5. development and coding
6. learning curve.

It is much faster than a GUI based OS, and it does have a very large amount of commands to perform different operations like many more, i am not gonna mention anyone here, 


GIT Tutorials :-

Commands :- git add, 


1. git add :- This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. 

2. git branch :- This command is mainly used to create, update or to delete teh branches. There are many different options to perform certain tasks like, list all branches and many more.

3. git cehckout :- This command is used to switch between different branches or to restore working tree files. By defining option as (-b) it will create a brnach if a brnach not exist.

4. by using -m or -M during git branch, it will rename the current branch with the new name mentioned in the command at the last. (ex :- git branch -M Main) :- This line will convert the current master branch's name into Main branch.

5. git remote add origin :- This command will link your local repository to a remote repository. 
Index :- index refers to a temporary staging area where you collect changes made to files in your working directory before commiting them to repository.

6. Git PAT (Personal Access Token) :- It acts as an alternative to our password when authentication with a GIT hosting platform like GitHub.It will allow us to perform actions like pushing, cloning, pulling code, without using our login credentials.

The primary problem with the traditional login credentials on github was Security risk associated with using a single password for accessing both, our github account and other sensitive services which makes is more vulnerable to leaks. Github introduced PAT as more secure alternative by allowing users to generate unique tokens with specific permissions.


GIT Commands :
1. Git rebase
2. Git push
3. Git pull
4. Git commit
5. Git merge
6. Git reset
7. command for switching between different commits.
8. git clone
9. git switch



How git internally works ?
--> Git internally works by storing project versions as a series of snapshots, called "Commits", it works as a pointer to a tree based data structure representing the state of your files at that specific point in time.

Means we can simply say that, we can do time travel in git for going backword in time and check what was our pervious changes to our code. 

in git, Commits are stored in a tree based data structure, it means there will be 1 root node (First commit) then next commit will be the child node for the parent node, and we can create multiple branches and multiple child nodes using many different branches coming from the parent node.

A -- > B 
\
 --- > C
 
In this example, A is a first commit (Root node) from 1st branch called MAIN, And B is the child node for the Parent node (A) and C is another child node from another brnach Let's say (Trial)

Key Components of Git's internal structure :-

1. Blobs :- individual file contents are stored as blobs within git repo. identified by their unique hash.

2. Commits :- A commit object holds information about the changes made in a specific version of the project.

3. Branches :- A brnach in git is simply a pointer to a specific commit, allowing us to work on different versions of project simultaneously.

HEAD :- This is a pointer indicates which commit you are currently working on.
